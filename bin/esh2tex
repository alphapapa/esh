#!/bin/sh
":"; exec emacs -Q --script "$0" "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-

;; Copyright (C) 2016  Clément Pit-Claudel

;; Author: Clément Pit-Claudel <clement@clem-w50-mint>
;; Keywords: faces, tools

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Run `esh2tex --usage' for help.

;;; Code:

(eval-and-compile
  (setq-default load-prefer-newer t)
  (setq-default text-quoting-style 'grave)

  (defconst esh2tex--script-full-path
    (or (and load-in-progress load-file-name)
        (bound-and-true-p byte-compile-current-file)
        (buffer-file-name))
    "Full path of this script.")

  (defconst esh2tex--parent-directory
    (file-name-directory
     (directory-file-name
      (file-name-directory esh2tex--script-full-path)))
    "Full path to parent directory of this script.")

  (add-to-list 'load-path esh2tex--parent-directory)
  (require 'esh-client))

(defvar esh2tex--persist nil
  "See option --persist.")

(defvar esh2tex--stdout nil
  "See option --stdout.")

(defun esh2tex--help ()
  "Read help from README file."
  (with-temp-buffer
    (insert-file-contents (expand-file-name "README.rst" esh2tex--parent-directory))
    (goto-char (point-min))
    (while (re-search-forward "\n\\(\\.\\. code\\)?::.*\n" nil t) (replace-match ""))
    (buffer-string)))

(defconst esh2tex--ext "\\.tex\\'")

(defun esh2tex--latexify-one-to-file (path)
  "Call `esh-client-latexify-one-to-file'.
Prepares PATH by appending `.esh.tex'.  Warns and skips if PATH
doesn't end in `.tex'."
  (if (string-match-p esh2tex--ext path)
      (let ((dest (replace-regexp-in-string esh2tex--ext ".esh.tex" path t t)))
        (with-temp-file dest
          (let ((standard-output (current-buffer)))
            (esh-client-latexify-one path))))
    (esh-client-stderr "ESH Warning: skipping %S (unrecognized extension)\n" path)))

(defun esh2tex--unexpected-arg-msg (arg)
  "Construct an unexpected ARG error message."
  (concat (format "esh2tex: Unexpected argument %S." arg)
          (unless (string-match-p "^-" arg)
            "  Are you using --stdout with multiple input files?")))

(defun esh2tex--main ()
  "Main entry point."
  (unless argv
    (setq argv '("--usage")))
  (unwind-protect
      (let ((at-least-one nil))
        (while argv
          (pcase (pop argv)
            ("--usage"
             (princ (esh2tex--help)))
            ("--debug-on-error"
             (setq debug-on-error t)
             (setq esh-client-debug-server t))
            ("--kill-server"
             (esh-client-kill-server))
            ("--persist"
             (setq esh2tex--persist t))
            ("--no-cask"
             (setq esh-client-use-cask nil))
            ("--no-Q"
             (setq esh-client-pass-Q-to-server nil))
            ("--stdout"
             (setq esh2tex--stdout t))
            (arg
             (when (and argv esh2tex--stdout)
               (error "%s" (esh2tex--unexpected-arg-msg arg)))
             (if esh2tex--stdout
                 (esh-client-latexify-one arg)
               (esh2tex--latexify-one-to-file arg))
             (setq at-least-one t))))
        (unless at-least-one
          (error "No input files given")))
    (unless esh2tex--persist
      (esh-client-kill-server))))

(esh2tex--main)

;; Local Variables:
;; checkdoc-arguments-in-order-flag: nil
;; nameless-current-name: "esh2tex"
;; End:

(provide 'esh2tex)
;;; esh2tex ends here
